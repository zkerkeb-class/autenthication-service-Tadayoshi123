const { createClient } = require('redis');

let redisClient = null;
let isConnecting = false;

/**
 * R√©cup√®re la configuration Redis √† partir des variables d'environnement
 * Utilise l'infrastructure partag√©e SupervIA (DB 1 pour auth-service)
 * @returns {Object} Configuration Redis
 */
const getRedisConfig = () => {
  // Configuration pour l'infrastructure partag√©e SupervIA
  const redisUrl = process.env.REDIS_URL || 'redis://supervia-redis:6379/1';
  const redisPassword = process.env.REDIS_PASSWORD || null; // Pas de password en dev
  const redisDb = parseInt(process.env.REDIS_DB || '1', 10); // DB 1 pour auth-service

  // Masquer le mot de passe dans les logs
  const redisUrlForLogs = redisPassword 
    ? redisUrl.replace(/:([^@/]*)@/, ':***@').replace(`:${redisPassword}`, ':***')
    : redisUrl;

  return {
    url: redisUrl,
    urlForLogs: redisUrlForLogs,
    password: redisPassword,
    database: redisDb,
    // Configuration optimis√©e pour l'auth-service
    socket: {
      connectTimeout: 5000,
      lazyConnect: true,
      reconnectDelay: 1000,
      maxRetriesPerRequest: 3,
    },
    retryDelayOnFailover: 100,
    maxRetriesPerRequest: 3,
    lazyConnect: true
  };
};

/**
 * Initialise la connexion Redis avec l'infrastructure partag√©e
 * @returns {Promise<Object>} Client Redis
 */
const initRedis = async () => {
  if (redisClient && redisClient.isReady) {
    return redisClient;
  }

  if (isConnecting) {
    // Attendre que la connexion soit √©tablie
    let attempts = 0;
    while (isConnecting && attempts < 50) {
      await new Promise(resolve => setTimeout(resolve, 100));
      attempts++;
    }
    return redisClient;
  }

  isConnecting = true;

  try {
    const config = getRedisConfig();
    console.log(`üîó Connexion Redis SupervIA: ${config.urlForLogs}, DB: ${config.database}`);

    // Configuration optimis√©e pour l'infrastructure partag√©e
    const clientConfig = {
      url: config.url,
      database: config.database,
      socket: config.socket,
      // Pr√©fixe pour √©viter les collisions avec les autres services
      keyPrefix: 'auth:',
      // Configuration de retry
      retry_strategy: (options) => {
        if (options.error && options.error.code === 'ECONNREFUSED') {
          console.error('üî¥ Redis: Connexion refus√©e');
          return new Error('Redis connexion refus√©e');
        }
        if (options.total_retry_time > 1000 * 60 * 60) {
          console.error('üî¥ Redis: Timeout de retry atteint');
          return new Error('Redis retry timeout');
        }
        if (options.attempt > 10) {
          console.error('üî¥ Redis: Trop de tentatives de connexion');
          return undefined;
        }
        // Reconnexion avec backoff exponentiel
        return Math.min(options.attempt * 100, 3000);
      }
    };

    // Ajouter le password seulement s'il est d√©fini
    if (config.password) {
      clientConfig.password = config.password;
    }

    redisClient = createClient(clientConfig);

    // Gestion des √©v√©nements optimis√©e
    redisClient.on('error', (err) => {
      console.error('üî¥ Redis Error (Auth Service):', err.message);
    });

    redisClient.on('connect', () => {
      console.log('üü¢ Redis Auth Service connect√© √† l\'infrastructure partag√©e');
    });

    redisClient.on('reconnecting', () => {
      console.log('üü° Redis Auth Service: Reconnexion en cours...');
    });

    redisClient.on('ready', () => {
      console.log('‚úÖ Redis Auth Service: Pr√™t pour les op√©rations');
    });

    redisClient.on('end', () => {
      console.log('üü† Redis Auth Service: Connexion ferm√©e');
    });

    // Connexion au serveur Redis de l'infrastructure
    await redisClient.connect();
    isConnecting = false;
    
    // Test de connexion
    await redisClient.ping();
    console.log('üöÄ Redis Auth Service: Connexion √©tablie avec succ√®s');
    
    return redisClient;
  } catch (error) {
    isConnecting = false;
    console.error('‚ùå Erreur Redis Auth Service:', error.message);
    
    // En d√©veloppement, ne pas faire √©chouer le service si Redis n'est pas disponible
    if (process.env.NODE_ENV === 'development') {
      console.warn('‚ö†Ô∏è  Redis non disponible en d√©veloppement - Cache d√©sactiv√©');
      return null;
    }
    
    throw error;
  }
};

/**
 * Ferme la connexion Redis proprement
 */
const closeRedis = async () => {
  if (redisClient && redisClient.isReady) {
    try {
      await redisClient.quit();
      console.log('üëã Connexion Redis Auth Service ferm√©e proprement');
      redisClient = null;
    } catch (error) {
      console.error('‚ùå Erreur lors de la fermeture Redis:', error.message);
      // Force la fermeture en cas d'erreur
      if (redisClient) {
        await redisClient.disconnect();
        redisClient = null;
      }
    }
  }
};

/**
 * R√©cup√®re le client Redis, l'initialise si n√©cessaire
 * @returns {Promise<Object|null>} Client Redis ou null si indisponible
 */
const getRedisClient = async () => {
  if (!redisClient || !redisClient.isReady) {
    return await initRedis();
  }
  return redisClient;
};

/**
 * V√©rifie si Redis est disponible et fonctionnel
 * @returns {Promise<boolean>} True si Redis est disponible
 */
const isRedisAvailable = async () => {
  try {
    const client = await getRedisClient();
    if (!client) return false;
    
    await client.ping();
    return true;
  } catch (error) {
    console.warn('‚ö†Ô∏è  Redis temporairement indisponible:', error.message);
    return false;
  }
};

/**
 * Stocke des donn√©es dans Redis avec pr√©fixe auth: et expiration
 * @param {string} key Cl√© (sera pr√©fix√©e par auth:)
 * @param {any} data Donn√©es √† stocker (sera s√©rialis√©e en JSON)
 * @param {number} expiration Expiration en secondes (d√©faut: 1 jour)
 * @returns {Promise<string|null>} R√©sultat de l'op√©ration ou null si Redis indisponible
 */
const storeData = async (key, data, expiration = 86400) => {
  try {
    const client = await getRedisClient();
    if (!client) return null;
    
    const serialized = JSON.stringify(data);
    const result = await client.setEx(key, expiration, serialized);
    
    console.log(`üìù Redis: Stock√© ${key} (expire dans ${expiration}s)`);
    return result;
  } catch (error) {
    console.error(`‚ùå Erreur stockage Redis (${key}):`, error.message);
    // En production, on peut choisir de fail silently pour ne pas casser l'auth
    if (process.env.NODE_ENV === 'production') {
      return null;
    }
    throw error;
  }
};

/**
 * R√©cup√®re des donn√©es depuis Redis avec pr√©fixe auth:
 * @param {string} key Cl√© (sera pr√©fix√©e par auth:)
 * @returns {Promise<any|null>} Donn√©es d√©s√©rialis√©es ou null
 */
const getData = async (key) => {
  try {
    const client = await getRedisClient();
    if (!client) return null;
    
    const data = await client.get(key);
    const result = data ? JSON.parse(data) : null;
    
    if (result) {
      console.log(`üìñ Redis: R√©cup√©r√© ${key}`);
    }
    
    return result;
  } catch (error) {
    console.error(`‚ùå Erreur lecture Redis (${key}):`, error.message);
    return null;
  }
};

/**
 * Supprime des donn√©es de Redis avec pr√©fixe auth:
 * @param {string} key Cl√© (sera pr√©fix√©e par auth:)
 * @returns {Promise<number>} Nombre de cl√©s supprim√©es
 */
const deleteData = async (key) => {
  try {
    const client = await getRedisClient();
    if (!client) return 0;
    
    const result = await client.del(key);
    console.log(`üóëÔ∏è  Redis: Supprim√© ${key}`);
    return result;
  } catch (error) {
    console.error(`‚ùå Erreur suppression Redis (${key}):`, error.message);
    return 0;
  }
};

/**
 * Nettoie les donn√©es expir√©es et obsol√®tes (maintenance)
 * @returns {Promise<number>} Nombre de cl√©s nettoy√©es
 */
const cleanup = async () => {
  try {
    const client = await getRedisClient();
    if (!client) return 0;
    
    // Supprimer les sessions expir√©es et autres donn√©es obsol√®tes
    const keys = await client.keys('session:*');
    let cleaned = 0;
    
    for (const key of keys) {
      const ttl = await client.ttl(key);
      if (ttl === -1) { // Pas d'expiration d√©finie
        await client.expire(key, 86400); // 24h par d√©faut
        cleaned++;
      }
    }
    
    console.log(`üßπ Redis: ${cleaned} cl√©s de session nettoy√©es`);
    return cleaned;
  } catch (error) {
    console.error('‚ùå Erreur nettoyage Redis:', error.message);
    return 0;
  }
};

module.exports = {
  getRedisConfig,
  initRedis,
  closeRedis,
  getRedisClient,
  isRedisAvailable,
  storeData,
  getData,
  deleteData,
  cleanup
}; 