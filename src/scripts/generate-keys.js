/**
 * Script de g√©n√©ration de cl√©s RSA pour la signature des JWT
 */
require('dotenv').config({ path: require('path').resolve(__dirname, '../../.env') });
const crypto = require('crypto');
const { v4: uuidv4 } = require('uuid');
const { generateKeyPair, exportPKCS8, exportSPKI } = require('jose');
const DbServiceClient = require('../services/db-client');

const dbClient = new DbServiceClient();

const KEY_ALGORITHM = 'RS256';

/**
 * G√©n√®re une nouvelle paire de cl√©s RSA et l'enregistre via le db-service
 */
async function generateAndStoreKeyPair() {
  console.log('G√©n√©ration d\'une nouvelle paire de cl√©s RSA...');
  
  try {
    const { privateKey, publicKey } = await generateKeyPair('RS256', { extractable: true });

    // Exporter au format PEM
    const privateKeyPem = await exportPKCS8(privateKey);
    const publicKeyPem = await exportSPKI(publicKey);

    // Pr√©parer les donn√©es pour le db-service
    const keyData = {
      kid: uuidv4(),
      privateKey: privateKeyPem,
      publicKey: publicKeyPem,
      algorithm: 'RS256',
      status: 'ACTIVE',
    };

    const keyPair = await dbClient.createKeyPair(keyData);
    
    console.log(`‚úÖ Nouvelle paire de cl√©s g√©n√©r√©e et stock√©e avec succ√®s!`);
    console.log(`üîë Kid: ${keyPair.kid}`);
    console.log(`üîß Algorithme: ${KEY_ALGORITHM}`);
    
    return keyPair;
  } catch (error) {
    console.error('‚ùå Erreur lors de la g√©n√©ration de la paire de cl√©s:', error.response?.data || error.message);
    throw error;
  }
}

/**
 * Fonction principale: v√©rifie si une cl√© active existe, sinon en cr√©e une.
 */
async function ensureActiveKey() {
  console.log('V√©rification de l\'existence d\'une cl√© de signature active...');
  try {
    await dbClient.testConnection();
    const activeKey = await dbClient.getActiveKeyPair().catch(() => null);

    if (activeKey) {
      console.log('‚úÖ Une cl√© active existe d√©j√†. Aucune action requise.');
      return;
    }
    
    console.log('‚ö†Ô∏è Aucune cl√© active trouv√©e. G√©n√©ration d\'une nouvelle cl√©...');
    await generateAndStoreKeyPair();
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification/cr√©ation de la cl√© active:', error.message);
    process.exit(1);
  }
}

// Lancement du script
ensureActiveKey();
